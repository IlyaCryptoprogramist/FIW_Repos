import ccxt.async_support as ccxt
import asyncio

async def test():
    hyper = ccxt.hyperliquid({'timeout': 3000})
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä—ã–Ω–∫–∏
    markets = await hyper.load_markets()
    
    # –ù–∞–π–¥—ë–º perpetual-–∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã (–æ–±—ã—á–Ω–æ —ç—Ç–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã —Å 'swap' –∏–ª–∏ 'contract')
    perpetual_symbols = []
    for symbol, market in markets.items():
        if market.get('contract') and market.get('type') == 'swap':
            perpetual_symbols.append(symbol)
    
    if not perpetual_symbols:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ perpetual-–∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞.")
        print("–í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä—ã–Ω–∫–∏ (–ø—Ä–∏–º–µ—Ä):")
        for sym, det in list(markets.items())[:10]: # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
            print(f"  {sym}: {det.get('type')}, contract: {det.get('contract')}")
        await hyper.close()
        return

    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(perpetual_symbols)} perpetual-–∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤. –ü—Ä–∏–º–µ—Ä—ã:")
    for symbol in perpetual_symbols[:5]: # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
        print(f"  - {symbol}")

    # –ü–æ–ø—Ä–æ–±—É–µ–º –≤—ã–∑–≤–∞—Ç—å –º–µ—Ç–æ–¥ history –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö perpetual-—Å–∏–º–≤–æ–ª–æ–≤
    symbol_to_test = perpetual_symbols[0]
    print(f"\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º {symbol_to_test}...")
    try:
        # –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–∑–≤–∞—Ç—å –º–µ—Ç–æ–¥ –±–µ–∑ `since` –∏ `limit`
        history = await hyper.fetch_funding_rate_history(symbol_to_test)
        print(f"–ò—Å—Ç–æ—Ä–∏—è –¥–ª—è {symbol_to_test}: {len(history)} –∑–∞–ø–∏—Å–µ–π")
        print(history[:2]) # –ü–æ–∫–∞–∂–µ—Ç –ø–µ—Ä–≤—ã–µ 2 –∑–∞–ø–∏—Å–∏, –µ—Å–ª–∏ –µ—Å—Ç—å
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è {symbol_to_test}: {e}")

    # –¢–∞–∫–∂–µ –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π FR
    try:
        current_fr = await hyper.fetch_funding_rate(symbol_to_test)
        print(f"–¢–µ–∫—É—â–∏–π FR –¥–ª—è {symbol_to_test}: {current_fr}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–µ–∫—É—â–µ–≥–æ FR –¥–ª—è {symbol_to_test}: {e}")

    await hyper.close()

asyncio.run(test())